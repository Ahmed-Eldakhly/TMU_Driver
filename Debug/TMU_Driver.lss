
TMU_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000b3a  00000bce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000328  00800070  00800070  00000bde  2**0
                  ALLOC
  3 .stab         000010e0  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cc6  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 b3 04 	jmp	0x966	; 0x966 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	13 e0       	ldi	r17, 0x03	; 3
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 13 05 	call	0xa26	; 0xa26 <main>
  8a:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
#include"DIO_MemoryMaping.h"
#include"DIO_interface.h"
#include"Macro.h"
#include "STDTYPES.h"
void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==High)
  a0:	8a 81       	ldd	r24, Y+2	; 0x02
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_WritePin+0x16>
  a6:	70 c0       	rjmp	.+224    	; 0x188 <DIO_WritePin+0xf6>
	{
		if((PinNum>=PIN0)&&(PinNum<=PIN7))
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	a0 f4       	brcc	.+40     	; 0xd6 <DIO_WritePin+0x44>
		{
			Set_Bit(PORTA,PinNum);
  ae:	ab e3       	ldi	r26, 0x3B	; 59
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	eb e3       	ldi	r30, 0x3B	; 59
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	48 2f       	mov	r20, r24
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 2e       	mov	r0, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_WritePin+0x3a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_WritePin+0x36>
  d0:	84 2b       	or	r24, r20
  d2:	8c 93       	st	X, r24
  d4:	ce c0       	rjmp	.+412    	; 0x272 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=PIN8)&&(PinNum<=PIN15))
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	d0 f0       	brcs	.+52     	; 0x110 <DIO_WritePin+0x7e>
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	80 31       	cpi	r24, 0x10	; 16
  e0:	b8 f4       	brcc	.+46     	; 0x110 <DIO_WritePin+0x7e>
		{
			Set_Bit(PORTB,(PinNum-PIN8));
  e2:	a8 e3       	ldi	r26, 0x38	; 56
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e8 e3       	ldi	r30, 0x38	; 56
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	48 2f       	mov	r20, r24
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	9c 01       	movw	r18, r24
  f6:	28 50       	subi	r18, 0x08	; 8
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_WritePin+0x74>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_WritePin+0x70>
 10a:	84 2b       	or	r24, r20
 10c:	8c 93       	st	X, r24
 10e:	b1 c0       	rjmp	.+354    	; 0x272 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=PIN16)&&(PinNum<=PIN23))
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	d0 f0       	brcs	.+52     	; 0x14a <DIO_WritePin+0xb8>
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	88 31       	cpi	r24, 0x18	; 24
 11a:	b8 f4       	brcc	.+46     	; 0x14a <DIO_WritePin+0xb8>
		{
			Set_Bit(PORTC,(PinNum-PIN16));
 11c:	a5 e3       	ldi	r26, 0x35	; 53
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e5 e3       	ldi	r30, 0x35	; 53
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	48 2f       	mov	r20, r24
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	9c 01       	movw	r18, r24
 130:	20 51       	subi	r18, 0x10	; 16
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_WritePin+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_WritePin+0xaa>
 144:	84 2b       	or	r24, r20
 146:	8c 93       	st	X, r24
 148:	94 c0       	rjmp	.+296    	; 0x272 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=PIN24)&&(PinNum<=PIN31))
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	88 31       	cpi	r24, 0x18	; 24
 14e:	08 f4       	brcc	.+2      	; 0x152 <DIO_WritePin+0xc0>
 150:	90 c0       	rjmp	.+288    	; 0x272 <DIO_WritePin+0x1e0>
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	80 32       	cpi	r24, 0x20	; 32
 156:	08 f0       	brcs	.+2      	; 0x15a <DIO_WritePin+0xc8>
 158:	8c c0       	rjmp	.+280    	; 0x272 <DIO_WritePin+0x1e0>
		{
			Set_Bit(PORTD,(PinNum-PIN24));
 15a:	a2 e3       	ldi	r26, 0x32	; 50
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	e2 e3       	ldi	r30, 0x32	; 50
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	48 2f       	mov	r20, r24
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9c 01       	movw	r18, r24
 16e:	28 51       	subi	r18, 0x18	; 24
 170:	30 40       	sbci	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 2e       	mov	r0, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_WritePin+0xec>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_WritePin+0xe8>
 182:	84 2b       	or	r24, r20
 184:	8c 93       	st	X, r24
 186:	75 c0       	rjmp	.+234    	; 0x272 <DIO_WritePin+0x1e0>
		}
	}
	else if(PinValue==PIN0)
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	88 23       	and	r24, r24
 18c:	09 f0       	breq	.+2      	; 0x190 <DIO_WritePin+0xfe>
 18e:	71 c0       	rjmp	.+226    	; 0x272 <DIO_WritePin+0x1e0>
	{

		if((PinNum>=PIN0)&&(PinNum<=PIN7))
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	a8 f4       	brcc	.+42     	; 0x1c0 <DIO_WritePin+0x12e>
		{
			Clear_Bit(PORTA,PinNum);
 196:	ab e3       	ldi	r26, 0x3B	; 59
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	eb e3       	ldi	r30, 0x3B	; 59
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	48 2f       	mov	r20, r24
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 2e       	mov	r0, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_WritePin+0x122>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_WritePin+0x11e>
 1b8:	80 95       	com	r24
 1ba:	84 23       	and	r24, r20
 1bc:	8c 93       	st	X, r24
 1be:	59 c0       	rjmp	.+178    	; 0x272 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=PIN8)&&(PinNum<=PIN15))
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	88 30       	cpi	r24, 0x08	; 8
 1c4:	d8 f0       	brcs	.+54     	; 0x1fc <DIO_WritePin+0x16a>
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	80 31       	cpi	r24, 0x10	; 16
 1ca:	c0 f4       	brcc	.+48     	; 0x1fc <DIO_WritePin+0x16a>
		{
			Clear_Bit(PORTB,(PinNum-PIN8));
 1cc:	a8 e3       	ldi	r26, 0x38	; 56
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	e8 e3       	ldi	r30, 0x38	; 56
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	88 2f       	mov	r24, r24
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	9c 01       	movw	r18, r24
 1e0:	28 50       	subi	r18, 0x08	; 8
 1e2:	30 40       	sbci	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_WritePin+0x15e>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_WritePin+0x15a>
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	3b c0       	rjmp	.+118    	; 0x272 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=PIN16)&&(PinNum<=PIN23))
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	80 31       	cpi	r24, 0x10	; 16
 200:	d8 f0       	brcs	.+54     	; 0x238 <DIO_WritePin+0x1a6>
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 31       	cpi	r24, 0x18	; 24
 206:	c0 f4       	brcc	.+48     	; 0x238 <DIO_WritePin+0x1a6>
		{
			Clear_Bit(PORTC,(PinNum-PIN16));
 208:	a5 e3       	ldi	r26, 0x35	; 53
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e5 e3       	ldi	r30, 0x35	; 53
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	48 2f       	mov	r20, r24
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	88 2f       	mov	r24, r24
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	9c 01       	movw	r18, r24
 21c:	20 51       	subi	r18, 0x10	; 16
 21e:	30 40       	sbci	r19, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 2e       	mov	r0, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_WritePin+0x19a>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_WritePin+0x196>
 230:	80 95       	com	r24
 232:	84 23       	and	r24, r20
 234:	8c 93       	st	X, r24
 236:	1d c0       	rjmp	.+58     	; 0x272 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=PIN24)&&(PinNum<=PIN31))
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	88 31       	cpi	r24, 0x18	; 24
 23c:	d0 f0       	brcs	.+52     	; 0x272 <DIO_WritePin+0x1e0>
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	80 32       	cpi	r24, 0x20	; 32
 242:	b8 f4       	brcc	.+46     	; 0x272 <DIO_WritePin+0x1e0>
		{
			Clear_Bit(PORTD,(PinNum-PIN24));
 244:	a2 e3       	ldi	r26, 0x32	; 50
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e2 e3       	ldi	r30, 0x32	; 50
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	9c 01       	movw	r18, r24
 258:	28 51       	subi	r18, 0x18	; 24
 25a:	30 40       	sbci	r19, 0x00	; 0
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 2e       	mov	r0, r18
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_WritePin+0x1d6>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_WritePin+0x1d2>
 26c:	80 95       	com	r24
 26e:	84 23       	and	r24, r20
 270:	8c 93       	st	X, r24

		}
	}

}
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	00 d0       	rcall	.+0      	; 0x282 <DIO_ReadPin+0x6>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	89 83       	std	Y+1, r24	; 0x01
	if((PinNum>=PIN0)&&(PinNum<=PIN7))
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	88 30       	cpi	r24, 0x08	; 8
 28c:	98 f4       	brcc	.+38     	; 0x2b4 <DIO_ReadPin+0x38>
	{
		return Get_Bit(PINA,PinNum);
 28e:	e9 e3       	ldi	r30, 0x39	; 57
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	88 2f       	mov	r24, r24
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	a9 01       	movw	r20, r18
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_ReadPin+0x2a>
 2a2:	55 95       	asr	r21
 2a4:	47 95       	ror	r20
 2a6:	8a 95       	dec	r24
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_ReadPin+0x26>
 2aa:	ca 01       	movw	r24, r20
 2ac:	58 2f       	mov	r21, r24
 2ae:	51 70       	andi	r21, 0x01	; 1
 2b0:	5a 83       	std	Y+2, r21	; 0x02
 2b2:	50 c0       	rjmp	.+160    	; 0x354 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=PIN8)&&(PinNum<=PIN15))
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	88 30       	cpi	r24, 0x08	; 8
 2b8:	b8 f0       	brcs	.+46     	; 0x2e8 <DIO_ReadPin+0x6c>
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	80 31       	cpi	r24, 0x10	; 16
 2be:	a0 f4       	brcc	.+40     	; 0x2e8 <DIO_ReadPin+0x6c>
	{
		return Get_Bit(PINB,(PinNum-PIN8));
 2c0:	e6 e3       	ldi	r30, 0x36	; 54
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	88 2f       	mov	r24, r24
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	08 97       	sbiw	r24, 0x08	; 8
 2d2:	a9 01       	movw	r20, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_ReadPin+0x5e>
 2d6:	55 95       	asr	r21
 2d8:	47 95       	ror	r20
 2da:	8a 95       	dec	r24
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_ReadPin+0x5a>
 2de:	ca 01       	movw	r24, r20
 2e0:	58 2f       	mov	r21, r24
 2e2:	51 70       	andi	r21, 0x01	; 1
 2e4:	5a 83       	std	Y+2, r21	; 0x02
 2e6:	36 c0       	rjmp	.+108    	; 0x354 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=PIN16)&&(PinNum<=PIN23))
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	80 31       	cpi	r24, 0x10	; 16
 2ec:	b8 f0       	brcs	.+46     	; 0x31c <DIO_ReadPin+0xa0>
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	88 31       	cpi	r24, 0x18	; 24
 2f2:	a0 f4       	brcc	.+40     	; 0x31c <DIO_ReadPin+0xa0>
	{
		return Get_Bit(PINC,(PinNum-PIN16));
 2f4:	e3 e3       	ldi	r30, 0x33	; 51
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	88 2f       	mov	r24, r24
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	40 97       	sbiw	r24, 0x10	; 16
 306:	a9 01       	movw	r20, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_ReadPin+0x92>
 30a:	55 95       	asr	r21
 30c:	47 95       	ror	r20
 30e:	8a 95       	dec	r24
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_ReadPin+0x8e>
 312:	ca 01       	movw	r24, r20
 314:	58 2f       	mov	r21, r24
 316:	51 70       	andi	r21, 0x01	; 1
 318:	5a 83       	std	Y+2, r21	; 0x02
 31a:	1c c0       	rjmp	.+56     	; 0x354 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=PIN24)&&(PinNum<=PIN31))
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	b8 f0       	brcs	.+46     	; 0x350 <DIO_ReadPin+0xd4>
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	80 32       	cpi	r24, 0x20	; 32
 326:	a0 f4       	brcc	.+40     	; 0x350 <DIO_ReadPin+0xd4>
	{
		return Get_Bit(PIND,(PinNum-PIN24));
 328:	e0 e3       	ldi	r30, 0x30	; 48
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	28 2f       	mov	r18, r24
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	88 2f       	mov	r24, r24
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	48 97       	sbiw	r24, 0x18	; 24
 33a:	a9 01       	movw	r20, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_ReadPin+0xc6>
 33e:	55 95       	asr	r21
 340:	47 95       	ror	r20
 342:	8a 95       	dec	r24
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_ReadPin+0xc2>
 346:	ca 01       	movw	r24, r20
 348:	58 2f       	mov	r21, r24
 34a:	51 70       	andi	r21, 0x01	; 1
 34c:	5a 83       	std	Y+2, r21	; 0x02
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_ReadPin+0xd8>
	}
	return PIN8;
 350:	88 e0       	ldi	r24, 0x08	; 8
 352:	8a 83       	std	Y+2, r24	; 0x02
 354:	8a 81       	ldd	r24, Y+2	; 0x02
}
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	cf 91       	pop	r28
 35c:	df 91       	pop	r29
 35e:	08 95       	ret

00000360 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 360:	df 93       	push	r29
 362:	cf 93       	push	r28
 364:	00 d0       	rcall	.+0      	; 0x366 <DIO_SetPinDirection+0x6>
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	89 83       	std	Y+1, r24	; 0x01
 36c:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==Input)
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	88 23       	and	r24, r24
 372:	09 f0       	breq	.+2      	; 0x376 <DIO_SetPinDirection+0x16>
 374:	74 c0       	rjmp	.+232    	; 0x45e <DIO_SetPinDirection+0xfe>
	{
		if((PinNum>=PIN0)&&(PinNum<=PIN7))
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	88 30       	cpi	r24, 0x08	; 8
 37a:	a8 f4       	brcc	.+42     	; 0x3a6 <DIO_SetPinDirection+0x46>
		{
			Clear_Bit(DDRA,PinNum);
 37c:	aa e3       	ldi	r26, 0x3A	; 58
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	ea e3       	ldi	r30, 0x3A	; 58
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	48 2f       	mov	r20, r24
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 2e       	mov	r0, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_SetPinDirection+0x3a>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_SetPinDirection+0x36>
 39e:	80 95       	com	r24
 3a0:	84 23       	and	r24, r20
 3a2:	8c 93       	st	X, r24
 3a4:	cd c0       	rjmp	.+410    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
		else if((PinNum>=PIN8)&&(PinNum<=PIN15))
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	88 30       	cpi	r24, 0x08	; 8
 3aa:	d8 f0       	brcs	.+54     	; 0x3e2 <DIO_SetPinDirection+0x82>
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	80 31       	cpi	r24, 0x10	; 16
 3b0:	c0 f4       	brcc	.+48     	; 0x3e2 <DIO_SetPinDirection+0x82>
		{
			Clear_Bit(DDRB,(PinNum-PIN8));
 3b2:	a7 e3       	ldi	r26, 0x37	; 55
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	e7 e3       	ldi	r30, 0x37	; 55
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	88 2f       	mov	r24, r24
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	9c 01       	movw	r18, r24
 3c6:	28 50       	subi	r18, 0x08	; 8
 3c8:	30 40       	sbci	r19, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 2e       	mov	r0, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_SetPinDirection+0x76>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_SetPinDirection+0x72>
 3da:	80 95       	com	r24
 3dc:	84 23       	and	r24, r20
 3de:	8c 93       	st	X, r24
 3e0:	af c0       	rjmp	.+350    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
		else if((PinNum>=PIN16)&&(PinNum<=PIN23))
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	80 31       	cpi	r24, 0x10	; 16
 3e6:	d8 f0       	brcs	.+54     	; 0x41e <DIO_SetPinDirection+0xbe>
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	88 31       	cpi	r24, 0x18	; 24
 3ec:	c0 f4       	brcc	.+48     	; 0x41e <DIO_SetPinDirection+0xbe>
		{
			Clear_Bit(DDRC,(PinNum-PIN16));
 3ee:	a4 e3       	ldi	r26, 0x34	; 52
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e4 e3       	ldi	r30, 0x34	; 52
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	88 2f       	mov	r24, r24
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	9c 01       	movw	r18, r24
 402:	20 51       	subi	r18, 0x10	; 16
 404:	30 40       	sbci	r19, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 2e       	mov	r0, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_SetPinDirection+0xb2>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_SetPinDirection+0xae>
 416:	80 95       	com	r24
 418:	84 23       	and	r24, r20
 41a:	8c 93       	st	X, r24
 41c:	91 c0       	rjmp	.+290    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
		else if((PinNum>=PIN24)&&(PinNum<=PIN31))
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	88 31       	cpi	r24, 0x18	; 24
 422:	08 f4       	brcc	.+2      	; 0x426 <DIO_SetPinDirection+0xc6>
 424:	8d c0       	rjmp	.+282    	; 0x540 <DIO_SetPinDirection+0x1e0>
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	80 32       	cpi	r24, 0x20	; 32
 42a:	08 f0       	brcs	.+2      	; 0x42e <DIO_SetPinDirection+0xce>
 42c:	89 c0       	rjmp	.+274    	; 0x540 <DIO_SetPinDirection+0x1e0>
		{
			Clear_Bit(DDRD,(PinNum-PIN24));
 42e:	a1 e3       	ldi	r26, 0x31	; 49
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	e1 e3       	ldi	r30, 0x31	; 49
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	48 2f       	mov	r20, r24
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	88 2f       	mov	r24, r24
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	9c 01       	movw	r18, r24
 442:	28 51       	subi	r18, 0x18	; 24
 444:	30 40       	sbci	r19, 0x00	; 0
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 2e       	mov	r0, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_SetPinDirection+0xf2>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_SetPinDirection+0xee>
 456:	80 95       	com	r24
 458:	84 23       	and	r24, r20
 45a:	8c 93       	st	X, r24
 45c:	71 c0       	rjmp	.+226    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==Output)
 45e:	8a 81       	ldd	r24, Y+2	; 0x02
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	09 f0       	breq	.+2      	; 0x466 <DIO_SetPinDirection+0x106>
 464:	6d c0       	rjmp	.+218    	; 0x540 <DIO_SetPinDirection+0x1e0>
	{
		if((PinNum>=PIN0)&&(PinNum<=PIN7))
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	88 30       	cpi	r24, 0x08	; 8
 46a:	a0 f4       	brcc	.+40     	; 0x494 <DIO_SetPinDirection+0x134>
		{
			Set_Bit(DDRA,PinNum);
 46c:	aa e3       	ldi	r26, 0x3A	; 58
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	ea e3       	ldi	r30, 0x3A	; 58
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	48 2f       	mov	r20, r24
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 2e       	mov	r0, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_SetPinDirection+0x12a>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_SetPinDirection+0x126>
 48e:	84 2b       	or	r24, r20
 490:	8c 93       	st	X, r24
 492:	56 c0       	rjmp	.+172    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
		else if((PinNum>=PIN8)&&(PinNum<=PIN15))
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	88 30       	cpi	r24, 0x08	; 8
 498:	d0 f0       	brcs	.+52     	; 0x4ce <DIO_SetPinDirection+0x16e>
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	80 31       	cpi	r24, 0x10	; 16
 49e:	b8 f4       	brcc	.+46     	; 0x4ce <DIO_SetPinDirection+0x16e>
		{
			Set_Bit(DDRB,(PinNum-PIN8));
 4a0:	a7 e3       	ldi	r26, 0x37	; 55
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e7 e3       	ldi	r30, 0x37	; 55
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	48 2f       	mov	r20, r24
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	88 2f       	mov	r24, r24
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	9c 01       	movw	r18, r24
 4b4:	28 50       	subi	r18, 0x08	; 8
 4b6:	30 40       	sbci	r19, 0x00	; 0
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 2e       	mov	r0, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_SetPinDirection+0x164>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	0a 94       	dec	r0
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_SetPinDirection+0x160>
 4c8:	84 2b       	or	r24, r20
 4ca:	8c 93       	st	X, r24
 4cc:	39 c0       	rjmp	.+114    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
		else if((PinNum>=PIN16)&&(PinNum<=PIN23))
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	80 31       	cpi	r24, 0x10	; 16
 4d2:	d0 f0       	brcs	.+52     	; 0x508 <DIO_SetPinDirection+0x1a8>
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	88 31       	cpi	r24, 0x18	; 24
 4d8:	b8 f4       	brcc	.+46     	; 0x508 <DIO_SetPinDirection+0x1a8>
		{
			Set_Bit(DDRC,(PinNum-PIN16));
 4da:	a4 e3       	ldi	r26, 0x34	; 52
 4dc:	b0 e0       	ldi	r27, 0x00	; 0
 4de:	e4 e3       	ldi	r30, 0x34	; 52
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	48 2f       	mov	r20, r24
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	88 2f       	mov	r24, r24
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	9c 01       	movw	r18, r24
 4ee:	20 51       	subi	r18, 0x10	; 16
 4f0:	30 40       	sbci	r19, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 2e       	mov	r0, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_SetPinDirection+0x19e>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_SetPinDirection+0x19a>
 502:	84 2b       	or	r24, r20
 504:	8c 93       	st	X, r24
 506:	1c c0       	rjmp	.+56     	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
		else if((PinNum>=PIN24)&&(PinNum<=PIN31))
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	88 31       	cpi	r24, 0x18	; 24
 50c:	c8 f0       	brcs	.+50     	; 0x540 <DIO_SetPinDirection+0x1e0>
 50e:	89 81       	ldd	r24, Y+1	; 0x01
 510:	80 32       	cpi	r24, 0x20	; 32
 512:	b0 f4       	brcc	.+44     	; 0x540 <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRD,(PinNum-PIN24));
 514:	a1 e3       	ldi	r26, 0x31	; 49
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	e1 e3       	ldi	r30, 0x31	; 49
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	48 2f       	mov	r20, r24
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	88 2f       	mov	r24, r24
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	9c 01       	movw	r18, r24
 528:	28 51       	subi	r18, 0x18	; 24
 52a:	30 40       	sbci	r19, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 2e       	mov	r0, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_SetPinDirection+0x1d8>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_SetPinDirection+0x1d4>
 53c:	84 2b       	or	r24, r20
 53e:	8c 93       	st	X, r24
		}
	}


}
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	cf 91       	pop	r28
 546:	df 91       	pop	r29
 548:	08 95       	ret

0000054a <TIMER_init>:
#include "STDTYPES.h"



void TIMER_init(void)
{
 54a:	df 93       	push	r29
 54c:	cf 93       	push	r28
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62

		TCCR0&=(~((1<<WGM00)|(1<<WGM01)));
 552:	a3 e5       	ldi	r26, 0x53	; 83
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e3 e5       	ldi	r30, 0x53	; 83
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	87 7b       	andi	r24, 0xB7	; 183
 55e:	8c 93       	st	X, r24
		TCCR0|=(1<<WGM01);
 560:	a3 e5       	ldi	r26, 0x53	; 83
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	e3 e5       	ldi	r30, 0x53	; 83
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	88 60       	ori	r24, 0x08	; 8
 56c:	8c 93       	st	X, r24
		OCR0=250;
 56e:	ec e5       	ldi	r30, 0x5C	; 92
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	8a ef       	ldi	r24, 0xFA	; 250
 574:	80 83       	st	Z, r24
		TCCR0&=(~((1<<CS00)|(1<<CS01)|(1<<CS02)));
 576:	a3 e5       	ldi	r26, 0x53	; 83
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	e3 e5       	ldi	r30, 0x53	; 83
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	88 7f       	andi	r24, 0xF8	; 248
 582:	8c 93       	st	X, r24
		TCCR0|=(1<<CS01);
 584:	a3 e5       	ldi	r26, 0x53	; 83
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	e3 e5       	ldi	r30, 0x53	; 83
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	8c 93       	st	X, r24
}
 592:	cf 91       	pop	r28
 594:	df 91       	pop	r29
 596:	08 95       	ret

00000598 <TIMER_Deinit>:
void TIMER_Deinit(void)
{
 598:	df 93       	push	r29
 59a:	cf 93       	push	r28
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=(~((1<<CS00)|(1<<CS01)|(1<<CS02)));
 5a0:	a3 e5       	ldi	r26, 0x53	; 83
 5a2:	b0 e0       	ldi	r27, 0x00	; 0
 5a4:	e3 e5       	ldi	r30, 0x53	; 83
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	88 7f       	andi	r24, 0xF8	; 248
 5ac:	8c 93       	st	X, r24
	OCR0=0;
 5ae:	ec e5       	ldi	r30, 0x5C	; 92
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	10 82       	st	Z, r1
}
 5b4:	cf 91       	pop	r28
 5b6:	df 91       	pop	r29
 5b8:	08 95       	ret

000005ba <TIMER_Base>:
 */

#include"TMU_cfg.h"
TMU_cfg TMU_Config = {TIMER0, NUM_1};
void TIMER_Base(Delay TIMER_Delay, uint8* FlagNum)
{
 5ba:	df 93       	push	r29
 5bc:	cf 93       	push	r28
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <TIMER_Base+0x6>
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <TIMER_Base+0x8>
 5c2:	00 d0       	rcall	.+0      	; 0x5c4 <TIMER_Base+0xa>
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	8a 83       	std	Y+2, r24	; 0x02
 5ca:	7c 83       	std	Y+4, r23	; 0x04
 5cc:	6b 83       	std	Y+3, r22	; 0x03
	TIMER_FLAG Timer_Flag;
	switch(TIMER_Delay)
 5ce:	8a 81       	ldd	r24, Y+2	; 0x02
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	3e 83       	std	Y+6, r19	; 0x06
 5d6:	2d 83       	std	Y+5, r18	; 0x05
 5d8:	8d 81       	ldd	r24, Y+5	; 0x05
 5da:	9e 81       	ldd	r25, Y+6	; 0x06
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	91 05       	cpc	r25, r1
 5e0:	59 f0       	breq	.+22     	; 0x5f8 <TIMER_Base+0x3e>
 5e2:	2d 81       	ldd	r18, Y+5	; 0x05
 5e4:	3e 81       	ldd	r19, Y+6	; 0x06
 5e6:	22 30       	cpi	r18, 0x02	; 2
 5e8:	31 05       	cpc	r19, r1
 5ea:	49 f0       	breq	.+18     	; 0x5fe <TIMER_Base+0x44>
 5ec:	8d 81       	ldd	r24, Y+5	; 0x05
 5ee:	9e 81       	ldd	r25, Y+6	; 0x06
 5f0:	00 97       	sbiw	r24, 0x00	; 0
 5f2:	39 f4       	brne	.+14     	; 0x602 <TIMER_Base+0x48>
	{
	case NUM_1:
		Timer_Flag=NUM_4;
 5f4:	19 82       	std	Y+1, r1	; 0x01
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <TIMER_Base+0x48>
		break;
	case NUM_2:
		Timer_Flag=NUM_8;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	89 83       	std	Y+1, r24	; 0x01
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <TIMER_Base+0x48>
		break;
	case NUM_5:
		Timer_Flag=NUM_20;
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	*FlagNum = Timer_Flag;
 602:	eb 81       	ldd	r30, Y+3	; 0x03
 604:	fc 81       	ldd	r31, Y+4	; 0x04
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	80 83       	st	Z, r24
}
 60a:	26 96       	adiw	r28, 0x06	; 6
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	f8 94       	cli
 610:	de bf       	out	0x3e, r29	; 62
 612:	0f be       	out	0x3f, r0	; 63
 614:	cd bf       	out	0x3d, r28	; 61
 616:	cf 91       	pop	r28
 618:	df 91       	pop	r29
 61a:	08 95       	ret

0000061c <TMU_Init>:
#include"DIO_interface.h"
uint8 TMU_flag;
uint32 g_Flag;
uint8 g_count=0;
Status TMU_Init(void)
{
 61c:	df 93       	push	r29
 61e:	cf 93       	push	r28
 620:	0f 92       	push	r0
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62

	if(TMU_Config.TIMER==TIMER0)
 626:	80 91 70 00 	lds	r24, 0x0070
 62a:	88 23       	and	r24, r24
 62c:	61 f4       	brne	.+24     	; 0x646 <TMU_Init+0x2a>
	{

		TIMER_init();
 62e:	0e 94 a5 02 	call	0x54a	; 0x54a <TIMER_init>
		TIMER_Base(TMU_Config.BaseTime,&TMU_flag);
 632:	80 91 71 00 	lds	r24, 0x0071
 636:	27 e9       	ldi	r18, 0x97	; 151
 638:	33 e0       	ldi	r19, 0x03	; 3
 63a:	b9 01       	movw	r22, r18
 63c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TIMER_Base>
		return OK;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	89 83       	std	Y+1, r24	; 0x01
 644:	01 c0       	rjmp	.+2      	; 0x648 <TMU_Init+0x2c>
	}
	else
	{
		return EnmTMUError_t;
 646:	19 82       	std	Y+1, r1	; 0x01
 648:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
 64a:	0f 90       	pop	r0
 64c:	cf 91       	pop	r28
 64e:	df 91       	pop	r29
 650:	08 95       	ret

00000652 <TMU_Start>:

Status TMU_Start(uint8 ID,Task_Cfg* Task_Cfg_ptr)
{
 652:	df 93       	push	r29
 654:	cf 93       	push	r28
 656:	00 d0       	rcall	.+0      	; 0x658 <TMU_Start+0x6>
 658:	00 d0       	rcall	.+0      	; 0x65a <TMU_Start+0x8>
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	89 83       	std	Y+1, r24	; 0x01
 660:	7b 83       	std	Y+3, r23	; 0x03
 662:	6a 83       	std	Y+2, r22	; 0x02

	if((Get_Bit(TIMSK,OCIE))==0)
 664:	e9 e5       	ldi	r30, 0x59	; 89
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	86 95       	lsr	r24
 66c:	88 2f       	mov	r24, r24
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	81 70       	andi	r24, 0x01	; 1
 672:	90 70       	andi	r25, 0x00	; 0
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	39 f4       	brne	.+14     	; 0x686 <TMU_Start+0x34>
	{
		Set_Bit(TIMSK,OCIE);
 678:	a9 e5       	ldi	r26, 0x59	; 89
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	e9 e5       	ldi	r30, 0x59	; 89
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	82 60       	ori	r24, 0x02	; 2
 684:	8c 93       	st	X, r24
	}
	else
	{
		/*DO No thing*/
	}
	if(ID<ID_MAX)
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	84 36       	cpi	r24, 0x64	; 100
 68a:	08 f0       	brcs	.+2      	; 0x68e <TMU_Start+0x3c>
 68c:	4f c0       	rjmp	.+158    	; 0x72c <TMU_Start+0xda>
	{
		arr[ID].TimeTask=Task_Cfg_ptr->TimeTask;
 68e:	89 81       	ldd	r24, Y+1	; 0x01
 690:	88 2f       	mov	r24, r24
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	ea 81       	ldd	r30, Y+2	; 0x02
 696:	fb 81       	ldd	r31, Y+3	; 0x03
 698:	20 81       	ld	r18, Z
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	fc 01       	movw	r30, r24
 6a8:	ed 58       	subi	r30, 0x8D	; 141
 6aa:	ff 4f       	sbci	r31, 0xFF	; 255
 6ac:	20 83       	st	Z, r18
		arr[ID].fun_rep=Task_Cfg_ptr->fun_rep;
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	88 2f       	mov	r24, r24
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	ea 81       	ldd	r30, Y+2	; 0x02
 6b6:	fb 81       	ldd	r31, Y+3	; 0x03
 6b8:	21 81       	ldd	r18, Z+1	; 0x01
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	fc 01       	movw	r30, r24
 6c8:	ec 58       	subi	r30, 0x8C	; 140
 6ca:	ff 4f       	sbci	r31, 0xFF	; 255
 6cc:	20 83       	st	Z, r18
		arr[ID].ptr=Task_Cfg_ptr->ptr;
 6ce:	89 81       	ldd	r24, Y+1	; 0x01
 6d0:	88 2f       	mov	r24, r24
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	ea 81       	ldd	r30, Y+2	; 0x02
 6d6:	fb 81       	ldd	r31, Y+3	; 0x03
 6d8:	22 81       	ldd	r18, Z+2	; 0x02
 6da:	33 81       	ldd	r19, Z+3	; 0x03
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	fc 01       	movw	r30, r24
 6ec:	ed 58       	subi	r30, 0x8D	; 141
 6ee:	ff 4f       	sbci	r31, 0xFF	; 255
 6f0:	31 83       	std	Z+1, r19	; 0x01
 6f2:	20 83       	st	Z, r18
		arr[ID].StartFlag=g_Flag;
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	88 2f       	mov	r24, r24
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	20 91 93 03 	lds	r18, 0x0393
 6fe:	30 91 94 03 	lds	r19, 0x0394
 702:	40 91 95 03 	lds	r20, 0x0395
 706:	50 91 96 03 	lds	r21, 0x0396
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	01 96       	adiw	r24, 0x01	; 1
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	fc 01       	movw	r30, r24
 71a:	ed 58       	subi	r30, 0x8D	; 141
 71c:	ff 4f       	sbci	r31, 0xFF	; 255
 71e:	20 83       	st	Z, r18
 720:	31 83       	std	Z+1, r19	; 0x01
 722:	42 83       	std	Z+2, r20	; 0x02
 724:	53 83       	std	Z+3, r21	; 0x03
		return OK;
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	8c 83       	std	Y+4, r24	; 0x04
 72a:	01 c0       	rjmp	.+2      	; 0x72e <TMU_Start+0xdc>
	}
	else
	{
		return EnmTMUError_t;
 72c:	1c 82       	std	Y+4, r1	; 0x04
 72e:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	0f 90       	pop	r0
 738:	cf 91       	pop	r28
 73a:	df 91       	pop	r29
 73c:	08 95       	ret

0000073e <TMU_Stop>:

Status TMU_Stop(uint8 ID)
{
 73e:	df 93       	push	r29
 740:	cf 93       	push	r28
 742:	00 d0       	rcall	.+0      	; 0x744 <TMU_Stop+0x6>
 744:	0f 92       	push	r0
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
 74a:	8a 83       	std	Y+2, r24	; 0x02
	if(arr[ID].ptr!=NULL)
 74c:	8a 81       	ldd	r24, Y+2	; 0x02
 74e:	88 2f       	mov	r24, r24
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	fc 01       	movw	r30, r24
 762:	ed 58       	subi	r30, 0x8D	; 141
 764:	ff 4f       	sbci	r31, 0xFF	; 255
 766:	80 81       	ld	r24, Z
 768:	91 81       	ldd	r25, Z+1	; 0x01
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	09 f4       	brne	.+2      	; 0x770 <TMU_Stop+0x32>
 76e:	4f c0       	rjmp	.+158    	; 0x80e <TMU_Stop+0xd0>
	{
		/*uint8 Interrupt_check;*/
		arr[ID].TimeTask=0;
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	88 2f       	mov	r24, r24
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	88 0f       	add	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	fc 01       	movw	r30, r24
 784:	ed 58       	subi	r30, 0x8D	; 141
 786:	ff 4f       	sbci	r31, 0xFF	; 255
 788:	10 82       	st	Z, r1
		arr[ID].fun_rep=0;
 78a:	8a 81       	ldd	r24, Y+2	; 0x02
 78c:	88 2f       	mov	r24, r24
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	fc 01       	movw	r30, r24
 79e:	ec 58       	subi	r30, 0x8C	; 140
 7a0:	ff 4f       	sbci	r31, 0xFF	; 255
 7a2:	10 82       	st	Z, r1
		arr[ID].ptr=NULL;
 7a4:	8a 81       	ldd	r24, Y+2	; 0x02
 7a6:	88 2f       	mov	r24, r24
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	01 96       	adiw	r24, 0x01	; 1
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	fc 01       	movw	r30, r24
 7ba:	ed 58       	subi	r30, 0x8D	; 141
 7bc:	ff 4f       	sbci	r31, 0xFF	; 255
 7be:	11 82       	std	Z+1, r1	; 0x01
 7c0:	10 82       	st	Z, r1
		for(uint8 count=0;count<ID_MAX;count++)
 7c2:	19 82       	std	Y+1, r1	; 0x01
 7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <TMU_Stop+0xb6>
		{
			if(arr[count].ptr!=NULL)
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
 7c8:	88 2f       	mov	r24, r24
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	01 96       	adiw	r24, 0x01	; 1
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	fc 01       	movw	r30, r24
 7dc:	ed 58       	subi	r30, 0x8D	; 141
 7de:	ff 4f       	sbci	r31, 0xFF	; 255
 7e0:	80 81       	ld	r24, Z
 7e2:	91 81       	ldd	r25, Z+1	; 0x01
 7e4:	00 97       	sbiw	r24, 0x00	; 0
 7e6:	19 f0       	breq	.+6      	; 0x7ee <TMU_Stop+0xb0>
			{
				return OK;
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	8b 83       	std	Y+3, r24	; 0x03
 7ec:	11 c0       	rjmp	.+34     	; 0x810 <TMU_Stop+0xd2>
	{
		/*uint8 Interrupt_check;*/
		arr[ID].TimeTask=0;
		arr[ID].fun_rep=0;
		arr[ID].ptr=NULL;
		for(uint8 count=0;count<ID_MAX;count++)
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
 7f0:	8f 5f       	subi	r24, 0xFF	; 255
 7f2:	89 83       	std	Y+1, r24	; 0x01
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
 7f6:	84 36       	cpi	r24, 0x64	; 100
 7f8:	30 f3       	brcs	.-52     	; 0x7c6 <TMU_Stop+0x88>
			if(arr[count].ptr!=NULL)
			{
				return OK;
			}
		}
		Clear_Bit(TIMSK,OCIE);
 7fa:	a9 e5       	ldi	r26, 0x59	; 89
 7fc:	b0 e0       	ldi	r27, 0x00	; 0
 7fe:	e9 e5       	ldi	r30, 0x59	; 89
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	8d 7f       	andi	r24, 0xFD	; 253
 806:	8c 93       	st	X, r24
		return OK;
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	8b 83       	std	Y+3, r24	; 0x03
 80c:	01 c0       	rjmp	.+2      	; 0x810 <TMU_Stop+0xd2>
	}
	else

	{
		return EnmTMUError_t;
 80e:	1b 82       	std	Y+3, r1	; 0x03
 810:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
 818:	cf 91       	pop	r28
 81a:	df 91       	pop	r29
 81c:	08 95       	ret

0000081e <TMU_Dispatch>:

Status TMU_Dispatch(void)
{
 81e:	ef 92       	push	r14
 820:	ff 92       	push	r15
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	df 93       	push	r29
 828:	cf 93       	push	r28
 82a:	0f 92       	push	r0
 82c:	cd b7       	in	r28, 0x3d	; 61
 82e:	de b7       	in	r29, 0x3e	; 62
	for(uint8 count=0;count<ID_MAX;count++)
 830:	19 82       	std	Y+1, r1	; 0x01
 832:	72 c0       	rjmp	.+228    	; 0x918 <__stack+0xb9>
	{

		if(((g_Flag-arr[count].StartFlag)%arr[count].TimeTask)==0)
 834:	20 91 93 03 	lds	r18, 0x0393
 838:	30 91 94 03 	lds	r19, 0x0394
 83c:	40 91 95 03 	lds	r20, 0x0395
 840:	50 91 96 03 	lds	r21, 0x0396
 844:	89 81       	ldd	r24, Y+1	; 0x01
 846:	88 2f       	mov	r24, r24
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	88 0f       	add	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	88 0f       	add	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	fc 01       	movw	r30, r24
 85a:	ed 58       	subi	r30, 0x8D	; 141
 85c:	ff 4f       	sbci	r31, 0xFF	; 255
 85e:	80 81       	ld	r24, Z
 860:	91 81       	ldd	r25, Z+1	; 0x01
 862:	a2 81       	ldd	r26, Z+2	; 0x02
 864:	b3 81       	ldd	r27, Z+3	; 0x03
 866:	79 01       	movw	r14, r18
 868:	8a 01       	movw	r16, r20
 86a:	e8 1a       	sub	r14, r24
 86c:	f9 0a       	sbc	r15, r25
 86e:	0a 0b       	sbc	r16, r26
 870:	1b 0b       	sbc	r17, r27
 872:	89 81       	ldd	r24, Y+1	; 0x01
 874:	88 2f       	mov	r24, r24
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	88 0f       	add	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	fc 01       	movw	r30, r24
 886:	ed 58       	subi	r30, 0x8D	; 141
 888:	ff 4f       	sbci	r31, 0xFF	; 255
 88a:	80 81       	ld	r24, Z
 88c:	28 2f       	mov	r18, r24
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	40 e0       	ldi	r20, 0x00	; 0
 892:	50 e0       	ldi	r21, 0x00	; 0
 894:	c8 01       	movw	r24, r16
 896:	b7 01       	movw	r22, r14
 898:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__udivmodsi4>
 89c:	dc 01       	movw	r26, r24
 89e:	cb 01       	movw	r24, r22
 8a0:	00 97       	sbiw	r24, 0x00	; 0
 8a2:	a1 05       	cpc	r26, r1
 8a4:	b1 05       	cpc	r27, r1
 8a6:	a9 f5       	brne	.+106    	; 0x912 <__stack+0xb3>
		{
			if(arr[count].fun_rep==OneTime)
 8a8:	89 81       	ldd	r24, Y+1	; 0x01
 8aa:	88 2f       	mov	r24, r24
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	88 0f       	add	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	fc 01       	movw	r30, r24
 8bc:	ec 58       	subi	r30, 0x8C	; 140
 8be:	ff 4f       	sbci	r31, 0xFF	; 255
 8c0:	80 81       	ld	r24, Z
 8c2:	88 23       	and	r24, r24
 8c4:	a9 f4       	brne	.+42     	; 0x8f0 <__stack+0x91>
			{
				arr[count].ptr();
 8c6:	89 81       	ldd	r24, Y+1	; 0x01
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	88 0f       	add	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	01 96       	adiw	r24, 0x01	; 1
 8d6:	88 0f       	add	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	fc 01       	movw	r30, r24
 8dc:	ed 58       	subi	r30, 0x8D	; 141
 8de:	ff 4f       	sbci	r31, 0xFF	; 255
 8e0:	01 90       	ld	r0, Z+
 8e2:	f0 81       	ld	r31, Z
 8e4:	e0 2d       	mov	r30, r0
 8e6:	09 95       	icall
				TMU_Stop(count);
 8e8:	89 81       	ldd	r24, Y+1	; 0x01
 8ea:	0e 94 9f 03 	call	0x73e	; 0x73e <TMU_Stop>
 8ee:	11 c0       	rjmp	.+34     	; 0x912 <__stack+0xb3>
			}
			else
			{
				arr[count].ptr();
 8f0:	89 81       	ldd	r24, Y+1	; 0x01
 8f2:	88 2f       	mov	r24, r24
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	88 0f       	add	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	88 0f       	add	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	88 0f       	add	r24, r24
 902:	99 1f       	adc	r25, r25
 904:	fc 01       	movw	r30, r24
 906:	ed 58       	subi	r30, 0x8D	; 141
 908:	ff 4f       	sbci	r31, 0xFF	; 255
 90a:	01 90       	ld	r0, Z+
 90c:	f0 81       	ld	r31, Z
 90e:	e0 2d       	mov	r30, r0
 910:	09 95       	icall
	}
}

Status TMU_Dispatch(void)
{
	for(uint8 count=0;count<ID_MAX;count++)
 912:	89 81       	ldd	r24, Y+1	; 0x01
 914:	8f 5f       	subi	r24, 0xFF	; 255
 916:	89 83       	std	Y+1, r24	; 0x01
 918:	89 81       	ldd	r24, Y+1	; 0x01
 91a:	84 36       	cpi	r24, 0x64	; 100
 91c:	08 f4       	brcc	.+2      	; 0x920 <__stack+0xc1>
 91e:	8a cf       	rjmp	.-236    	; 0x834 <TMU_Dispatch+0x16>
		{
			/*Do No Thing*/
		}

	}
	return OK;
 920:	81 e0       	ldi	r24, 0x01	; 1
}
 922:	0f 90       	pop	r0
 924:	cf 91       	pop	r28
 926:	df 91       	pop	r29
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	ff 90       	pop	r15
 92e:	ef 90       	pop	r14
 930:	08 95       	ret

00000932 <TMU_DeInit>:

Status TMU_DeInit(void)
{
 932:	df 93       	push	r29
 934:	cf 93       	push	r28
 936:	0f 92       	push	r0
 938:	cd b7       	in	r28, 0x3d	; 61
 93a:	de b7       	in	r29, 0x3e	; 62
if((Get_Bit(TIMSK,OCIE))==0)
 93c:	e9 e5       	ldi	r30, 0x59	; 89
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	86 95       	lsr	r24
 944:	88 2f       	mov	r24, r24
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	81 70       	andi	r24, 0x01	; 1
 94a:	90 70       	andi	r25, 0x00	; 0
 94c:	00 97       	sbiw	r24, 0x00	; 0
 94e:	29 f4       	brne	.+10     	; 0x95a <TMU_DeInit+0x28>
{
	TIMER_Deinit();
 950:	0e 94 cc 02 	call	0x598	; 0x598 <TIMER_Deinit>
	return OK;
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	89 83       	std	Y+1, r24	; 0x01
 958:	01 c0       	rjmp	.+2      	; 0x95c <TMU_DeInit+0x2a>
}
else
{
	return EnmTMUError_t;
 95a:	19 82       	std	Y+1, r1	; 0x01
 95c:	89 81       	ldd	r24, Y+1	; 0x01
}
}
 95e:	0f 90       	pop	r0
 960:	cf 91       	pop	r28
 962:	df 91       	pop	r29
 964:	08 95       	ret

00000966 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 966:	1f 92       	push	r1
 968:	0f 92       	push	r0
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	0f 92       	push	r0
 96e:	11 24       	eor	r1, r1
 970:	2f 93       	push	r18
 972:	3f 93       	push	r19
 974:	4f 93       	push	r20
 976:	5f 93       	push	r21
 978:	6f 93       	push	r22
 97a:	7f 93       	push	r23
 97c:	8f 93       	push	r24
 97e:	9f 93       	push	r25
 980:	af 93       	push	r26
 982:	bf 93       	push	r27
 984:	ef 93       	push	r30
 986:	ff 93       	push	r31
 988:	df 93       	push	r29
 98a:	cf 93       	push	r28
 98c:	cd b7       	in	r28, 0x3d	; 61
 98e:	de b7       	in	r29, 0x3e	; 62

	g_count++;
 990:	80 91 72 00 	lds	r24, 0x0072
 994:	8f 5f       	subi	r24, 0xFF	; 255
 996:	80 93 72 00 	sts	0x0072, r24
	if(g_count==TMU_flag)
 99a:	90 91 72 00 	lds	r25, 0x0072
 99e:	80 91 97 03 	lds	r24, 0x0397
 9a2:	98 17       	cp	r25, r24
 9a4:	b9 f4       	brne	.+46     	; 0x9d4 <__vector_10+0x6e>
	{
		g_count=0;
 9a6:	10 92 72 00 	sts	0x0072, r1
		g_Flag++;
 9aa:	80 91 93 03 	lds	r24, 0x0393
 9ae:	90 91 94 03 	lds	r25, 0x0394
 9b2:	a0 91 95 03 	lds	r26, 0x0395
 9b6:	b0 91 96 03 	lds	r27, 0x0396
 9ba:	01 96       	adiw	r24, 0x01	; 1
 9bc:	a1 1d       	adc	r26, r1
 9be:	b1 1d       	adc	r27, r1
 9c0:	80 93 93 03 	sts	0x0393, r24
 9c4:	90 93 94 03 	sts	0x0394, r25
 9c8:	a0 93 95 03 	sts	0x0395, r26
 9cc:	b0 93 96 03 	sts	0x0396, r27
		TMU_Dispatch();
 9d0:	0e 94 0f 04 	call	0x81e	; 0x81e <TMU_Dispatch>
	}
}
 9d4:	cf 91       	pop	r28
 9d6:	df 91       	pop	r29
 9d8:	ff 91       	pop	r31
 9da:	ef 91       	pop	r30
 9dc:	bf 91       	pop	r27
 9de:	af 91       	pop	r26
 9e0:	9f 91       	pop	r25
 9e2:	8f 91       	pop	r24
 9e4:	7f 91       	pop	r23
 9e6:	6f 91       	pop	r22
 9e8:	5f 91       	pop	r21
 9ea:	4f 91       	pop	r20
 9ec:	3f 91       	pop	r19
 9ee:	2f 91       	pop	r18
 9f0:	0f 90       	pop	r0
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	0f 90       	pop	r0
 9f6:	1f 90       	pop	r1
 9f8:	18 95       	reti

000009fa <led_on>:
#include"TMU_interface.h"
#include"DIO_interface.h"
#include"Macro.h"
#include"avr/interrupt.h"
/*#include"TIMER0_MemoryMaping.h"*/
void led_on(void){
 9fa:	df 93       	push	r29
 9fc:	cf 93       	push	r28
 9fe:	cd b7       	in	r28, 0x3d	; 61
 a00:	de b7       	in	r29, 0x3e	; 62
	 /* GO LED*/
	DIO_WritePin(PIN12,1u);
 a02:	8c e0       	ldi	r24, 0x0C	; 12
 a04:	61 e0       	ldi	r22, 0x01	; 1
 a06:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
}
 a0a:	cf 91       	pop	r28
 a0c:	df 91       	pop	r29
 a0e:	08 95       	ret

00000a10 <led_off>:
void led_off(void){
 a10:	df 93       	push	r29
 a12:	cf 93       	push	r28
 a14:	cd b7       	in	r28, 0x3d	; 61
 a16:	de b7       	in	r29, 0x3e	; 62
	 /* OFF LED*/
	DIO_WritePin(PIN12,0u);
 a18:	8c e0       	ldi	r24, 0x0C	; 12
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
}
 a20:	cf 91       	pop	r28
 a22:	df 91       	pop	r29
 a24:	08 95       	ret

00000a26 <main>:
int main(void)
{
 a26:	df 93       	push	r29
 a28:	cf 93       	push	r28
 a2a:	cd b7       	in	r28, 0x3d	; 61
 a2c:	de b7       	in	r29, 0x3e	; 62
 a2e:	6a 97       	sbiw	r28, 0x1a	; 26
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	f8 94       	cli
 a34:	de bf       	out	0x3e, r29	; 62
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinDirection(PIN12,1u);
 a3a:	8c e0       	ldi	r24, 0x0C	; 12
 a3c:	61 e0       	ldi	r22, 0x01	; 1
 a3e:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>

	/* Replace with your application code */
	TMU_Init();
 a42:	0e 94 0e 03 	call	0x61c	; 0x61c <TMU_Init>
	Task_Cfg x={30,Repeated,led_on,0};
 a46:	ce 01       	movw	r24, r28
 a48:	01 96       	adiw	r24, 0x01	; 1
 a4a:	9a 8b       	std	Y+18, r25	; 0x12
 a4c:	89 8b       	std	Y+17, r24	; 0x11
 a4e:	e8 e6       	ldi	r30, 0x68	; 104
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	fc 8b       	std	Y+20, r31	; 0x14
 a54:	eb 8b       	std	Y+19, r30	; 0x13
 a56:	f8 e0       	ldi	r31, 0x08	; 8
 a58:	fd 8b       	std	Y+21, r31	; 0x15
 a5a:	eb 89       	ldd	r30, Y+19	; 0x13
 a5c:	fc 89       	ldd	r31, Y+20	; 0x14
 a5e:	00 80       	ld	r0, Z
 a60:	8b 89       	ldd	r24, Y+19	; 0x13
 a62:	9c 89       	ldd	r25, Y+20	; 0x14
 a64:	01 96       	adiw	r24, 0x01	; 1
 a66:	9c 8b       	std	Y+20, r25	; 0x14
 a68:	8b 8b       	std	Y+19, r24	; 0x13
 a6a:	e9 89       	ldd	r30, Y+17	; 0x11
 a6c:	fa 89       	ldd	r31, Y+18	; 0x12
 a6e:	00 82       	st	Z, r0
 a70:	89 89       	ldd	r24, Y+17	; 0x11
 a72:	9a 89       	ldd	r25, Y+18	; 0x12
 a74:	01 96       	adiw	r24, 0x01	; 1
 a76:	9a 8b       	std	Y+18, r25	; 0x12
 a78:	89 8b       	std	Y+17, r24	; 0x11
 a7a:	9d 89       	ldd	r25, Y+21	; 0x15
 a7c:	91 50       	subi	r25, 0x01	; 1
 a7e:	9d 8b       	std	Y+21, r25	; 0x15
 a80:	ed 89       	ldd	r30, Y+21	; 0x15
 a82:	ee 23       	and	r30, r30
 a84:	51 f7       	brne	.-44     	; 0xa5a <main+0x34>
	Task_Cfg y={35,Repeated,led_off,0};
 a86:	ce 01       	movw	r24, r28
 a88:	09 96       	adiw	r24, 0x09	; 9
 a8a:	9f 8b       	std	Y+23, r25	; 0x17
 a8c:	8e 8b       	std	Y+22, r24	; 0x16
 a8e:	e0 e6       	ldi	r30, 0x60	; 96
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	f9 8f       	std	Y+25, r31	; 0x19
 a94:	e8 8f       	std	Y+24, r30	; 0x18
 a96:	f8 e0       	ldi	r31, 0x08	; 8
 a98:	fa 8f       	std	Y+26, r31	; 0x1a
 a9a:	e8 8d       	ldd	r30, Y+24	; 0x18
 a9c:	f9 8d       	ldd	r31, Y+25	; 0x19
 a9e:	00 80       	ld	r0, Z
 aa0:	88 8d       	ldd	r24, Y+24	; 0x18
 aa2:	99 8d       	ldd	r25, Y+25	; 0x19
 aa4:	01 96       	adiw	r24, 0x01	; 1
 aa6:	99 8f       	std	Y+25, r25	; 0x19
 aa8:	88 8f       	std	Y+24, r24	; 0x18
 aaa:	ee 89       	ldd	r30, Y+22	; 0x16
 aac:	ff 89       	ldd	r31, Y+23	; 0x17
 aae:	00 82       	st	Z, r0
 ab0:	8e 89       	ldd	r24, Y+22	; 0x16
 ab2:	9f 89       	ldd	r25, Y+23	; 0x17
 ab4:	01 96       	adiw	r24, 0x01	; 1
 ab6:	9f 8b       	std	Y+23, r25	; 0x17
 ab8:	8e 8b       	std	Y+22, r24	; 0x16
 aba:	9a 8d       	ldd	r25, Y+26	; 0x1a
 abc:	91 50       	subi	r25, 0x01	; 1
 abe:	9a 8f       	std	Y+26, r25	; 0x1a
 ac0:	ea 8d       	ldd	r30, Y+26	; 0x1a
 ac2:	ee 23       	and	r30, r30
 ac4:	51 f7       	brne	.-44     	; 0xa9a <main+0x74>
	TMU_Start(5,&x);
 ac6:	85 e0       	ldi	r24, 0x05	; 5
 ac8:	9e 01       	movw	r18, r28
 aca:	2f 5f       	subi	r18, 0xFF	; 255
 acc:	3f 4f       	sbci	r19, 0xFF	; 255
 ace:	b9 01       	movw	r22, r18
 ad0:	0e 94 29 03 	call	0x652	; 0x652 <TMU_Start>
	TMU_Start(11,&y);
 ad4:	9e 01       	movw	r18, r28
 ad6:	27 5f       	subi	r18, 0xF7	; 247
 ad8:	3f 4f       	sbci	r19, 0xFF	; 255
 ada:	8b e0       	ldi	r24, 0x0B	; 11
 adc:	b9 01       	movw	r22, r18
 ade:	0e 94 29 03 	call	0x652	; 0x652 <TMU_Start>
	/*TMU_Stop(11);
	TMU_Stop(5);*/
	Set_Bit(SREG,7);
 ae2:	af e5       	ldi	r26, 0x5F	; 95
 ae4:	b0 e0       	ldi	r27, 0x00	; 0
 ae6:	ef e5       	ldi	r30, 0x5F	; 95
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	80 81       	ld	r24, Z
 aec:	80 68       	ori	r24, 0x80	; 128
 aee:	8c 93       	st	X, r24
 af0:	ff cf       	rjmp	.-2      	; 0xaf0 <main+0xca>

00000af2 <__udivmodsi4>:
 af2:	a1 e2       	ldi	r26, 0x21	; 33
 af4:	1a 2e       	mov	r1, r26
 af6:	aa 1b       	sub	r26, r26
 af8:	bb 1b       	sub	r27, r27
 afa:	fd 01       	movw	r30, r26
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <__udivmodsi4_ep>

00000afe <__udivmodsi4_loop>:
 afe:	aa 1f       	adc	r26, r26
 b00:	bb 1f       	adc	r27, r27
 b02:	ee 1f       	adc	r30, r30
 b04:	ff 1f       	adc	r31, r31
 b06:	a2 17       	cp	r26, r18
 b08:	b3 07       	cpc	r27, r19
 b0a:	e4 07       	cpc	r30, r20
 b0c:	f5 07       	cpc	r31, r21
 b0e:	20 f0       	brcs	.+8      	; 0xb18 <__udivmodsi4_ep>
 b10:	a2 1b       	sub	r26, r18
 b12:	b3 0b       	sbc	r27, r19
 b14:	e4 0b       	sbc	r30, r20
 b16:	f5 0b       	sbc	r31, r21

00000b18 <__udivmodsi4_ep>:
 b18:	66 1f       	adc	r22, r22
 b1a:	77 1f       	adc	r23, r23
 b1c:	88 1f       	adc	r24, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	1a 94       	dec	r1
 b22:	69 f7       	brne	.-38     	; 0xafe <__udivmodsi4_loop>
 b24:	60 95       	com	r22
 b26:	70 95       	com	r23
 b28:	80 95       	com	r24
 b2a:	90 95       	com	r25
 b2c:	9b 01       	movw	r18, r22
 b2e:	ac 01       	movw	r20, r24
 b30:	bd 01       	movw	r22, r26
 b32:	cf 01       	movw	r24, r30
 b34:	08 95       	ret

00000b36 <_exit>:
 b36:	f8 94       	cli

00000b38 <__stop_program>:
 b38:	ff cf       	rjmp	.-2      	; 0xb38 <__stop_program>
